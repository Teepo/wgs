/**
 * WGS (Webedia Grid System)
 *
 * README :
 *
 * https://github.com/webedia-udg/wgs
 *
 */

/**
 * Mixin de media-query
 *
 * @param string $breakpoint : nom du breakpoint. Doit correspondre à l'un des
 *                             éléments de $breakpoints transmis à wgsSetup()
 * Ex : @include mq(desk){...}
 */
@mixin mq($breakpointName) { 
    @if map-has-key($_wgsBreakpoints, $breakpointName) {
        $size: nth(map-get($_wgsBreakpoints, $breakpointName),1);
        @media screen and (min-width: $size) {
            @content;
        }
    }
}

@mixin mqUntil($breakpointName) { 
    @if map-has-key($_wgsBreakpoints, $breakpointName) {
        $size: nth(map-get($_wgsBreakpoints, $breakpointName),1) - 1px;
        @media screen and (max-width: $size ) {
            @content;
        }
    }
}


/**
 * Ajoute les classes de grilles (.grid, .grid--fixed, .grid__item),
 * éventuellement préfixées. Gère les relations entre les .grid & .grid__item
 *
 * @param list $fixedWidths (false) => Liste de tailles fixes à gérer
 * @param string $breakpointName (false) => Le nom du breakpoint
 */
@mixin wgsGrid($fixedWidths: false, $breakpointName:false) {
    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="grid#{$sufix}"] {
        display: block;

        & + [class~="grid#{$sufix}"] {
            margin-top: 0;
        }

        & > .grid__item {
            display: inline-block;
            vertical-align: top;
            width: 100%;

            // Pour remettre bien l'ordre au cas où la grille serait inversée
            direction:ltr;
            text-align:left;
        }
    }


    [class~="grid--rev#{$sufix}"] {
        direction:rtl;
        text-align:left;
    }

    [class~="grid--center#{$sufix}"] {
        text-align: center;
        & > .grid__item {
            text-align: left;
        }
    }

    [class~="grid--right#{$sufix}"] {
        text-align: right;
        & > .grid__item {
            text-align: left;
        }
    }

    @if $fixedWidths {

        .grid[class~="grid--fixed#{$sufix}"] {
            width: 100%;
            display: table;
            table-layout: fixed;
            margin-left: 0;

            > .grid__item {
                display: table-cell;
                vertical-align: top;

            }
        }
        @if $sufix == "" {  
            .grid[class*="grid--fixed"] {
                > .grid__item {
                    &:first-child {
                        padding-left: 0;
                    }
                }
            }
        }
    }
}

/**
 * Gestion des gouttières
 * @param string $gutter => Taille de la gouttière
 * @param list $fixedWidths (false) => Liste de tailles fixes à gérer.
 * @param string $breakpointName (false) => Le nom du breakpoint
 */
@mixin wgsGridGutter($gutter, $fixedWidths: false, $breakpointName:false) {
    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="grid#{$sufix}"] {
        margin-left: -$gutter;
        margin-top: -$gutter;

        & > .grid__item {
            padding-left: $gutter;
            padding-top: $gutter;
        }

    }
}


/**
 * Ecrit des classes de largeur ratio.
 * 
 * @param String $breakpointName : le nom du breakpoint à prendre en compte
 */
@mixin wgsRatioWidths($breakpointName:false){

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="1/1#{$sufix}"]       { width: 100% !important; }
    
    // Demis
    [class~="1/2#{$sufix}"],
    [class~="2/4#{$sufix}"],
    [class~="3/6#{$sufix}"],
    [class~="4/8#{$sufix}"],
    [class~="5/10#{$sufix}"],
    [class~="6/12#{$sufix}"]      { width: 50% !important; }
    
    // Tiers
    [class~="1/3#{$sufix}"],
    [class~="2/6#{$sufix}"],
    [class~="3/9#{$sufix}"],
    [class~="4/12#{$sufix}"]      { width: 33.3333333% !important; }
    [class~="2/3#{$sufix}"],
    [class~="4/6#{$sufix}"],
    [class~="6/9#{$sufix}"],
    [class~="8/12#{$sufix}"]      { width: 66.6666666% !important; }
    
    // Quarts
    [class~="1/4#{$sufix}"],
    [class~="2/8#{$sufix}"],
    [class~="3/12#{$sufix}"]      { width: 25% !important; }
    [class~="3/4#{$sufix}"],
    [class~="6/8#{$sufix}"],
    [class~="9/12#{$sufix}"]      { width: 75% !important; }
    
    // Cinquièmes
    [class~="1/5#{$sufix}"],
    [class~="2/10#{$sufix}"]      { width: 20% !important; }
    [class~="2/5#{$sufix}"],
    [class~="4/10#{$sufix}"]      { width: 40% !important; }
    [class~="3/5#{$sufix}"],
    [class~="6/10#{$sufix}"]      { width: 60% !important; }
    [class~="4/5#{$sufix}"],
    [class~="8/10#{$sufix}"]      { width: 80% !important; }
    
    // Sixièmes
    [class~="1/6#{$sufix}"],
    [class~="2/12#{$sufix}"]      { width: 16.6666666% !important; }
    [class~="5/6#{$sufix}"],
    [class~="10/12#{$sufix}"]     { width: 83.3333333% !important; }

    // Huitièmes
    [class~="1/8#{$sufix}"]       { width: 12.5% !important; }
    [class~="3/8#{$sufix}"]       { width: 37.5% !important; }
    [class~="5/8#{$sufix}"]       { width: 62.5% !important; }
    [class~="7/8#{$sufix}"]       { width: 87.5% !important; }
    
    // Neuvièmes
    [class~="1/9#{$sufix}"]       { width: 11.1111111% !important; }
    [class~="2/9#{$sufix}"]       { width: 22.2222222% !important; }
    [class~="4/9#{$sufix}"]       { width: 44.4444444% !important; }
    [class~="5/9#{$sufix}"]       { width: 55.5555555% !important; }
    [class~="7/9#{$sufix}"]       { width: 77.7777777% !important; }
    [class~="8/9#{$sufix}"]       { width: 88.8888888% !important; }
    
    // Dixièmes
    [class~="1/10#{$sufix}"]      { width: 10% !important; }
    [class~="3/10#{$sufix}"]      { width: 30% !important; }
    [class~="7/10#{$sufix}"]      { width: 70% !important; }
    [class~="9/10#{$sufix}"]      { width: 90% !important; }
    
    // Douzièmes
    [class~="1/12#{$sufix}"]      { width:  8.3333333% !important; }
    [class~="5/12#{$sufix}"]      { width: 41.6666666% !important; }
    [class~="7/12#{$sufix}"]      { width: 58.3333333% !important; }
    [class~="11/12#{$sufix}"]     { width: 91.6666666% !important; }
}

/**
 * Ecrit des classes de largeur fixe.
 * @param string $size => taille à géger. Ex : 300px
 * @param string $gutter => Taille de la gouttière. Ex : 24px
 * @param string $breakpointName (false) => Le nom du breakpoint
 */
@mixin wgsFixedWidth($size, $gutter, $breakpointName:false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="#{$size}#{$sufix}"] {
        width: $size !important;
    }

    .grid__item + [class~="#{$size}#{$sufix}"] {
        width: $size + $gutter !important;
    }
}


/**
 * Quelques classes de visibilité
 * @param string $breakpointName (false) => Le nom du breakpoint
 */
@mixin wgsHidden($breakpointName: false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="hidden#{$sufix}"] {
        display: none !important;
    }    
}

@mixin wgsVisible($breakpointName: false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="visible#{$sufix}"] {
        display: none !important;
    }    
}

/**
 * Ecriture des règles
 * @param list $fixedWidths (false) : les tailles fixes à prendre en compte
 * @param map $breakpoints (false) : les breakpoints à prendre en compte
 * @param string $gutter (12px) : taille de la gouttière par défaut
 */
@mixin wgsSetup(
    $fixedWidths  : false,
    $breakpoints  : false,
    $gutter       : 12px
){
    // Global namespaced variable, utilisée par @include mq() pour éviter 
    // d'avoir à lui filer le tableau à chaque fois
    $_wgsBreakpoints : $breakpoints !global;

    // 1/ Borderbox pour tout le monde !
    // css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
    // paulirish.com/2012/box-sizing-border-box-ftw
    html {
        -webkit-box-sizing: border-box;
           -moz-box-sizing: border-box;
                box-sizing: border-box;
    }
    * {
        &,
        &:before,
        &:after{
            -webkit-box-sizing: inherit;
               -moz-box-sizing: inherit;
                    box-sizing: inherit;
        }
    }


    // 2/ Ratios sans responsive
    @include wgsGrid($fixedWidths);
    @include wgsGridGutter($gutter, $fixedWidths);
    @include wgsRatioWidths;


    // 3/ Tailles fixes sans responsive
    @if $fixedWidths {
        @each $width in $fixedWidths {
            @include wgsFixedWidth($width, $gutter);
        }
    }


    // 4/ Gestion des ratios et tailles fixes en responsive
    @if $breakpoints {
        
        @for $i from 1 through length($breakpoints) {

            $breakpointData   : nth(map-values($breakpoints), $i);
            $breakpointName   : nth(map-keys($breakpoints), $i);
            $breakpointSize   : nth($breakpointData,1);
            $breakpointGutter : nth($breakpointData,2);


            @include mq($breakpointName) {
                @include wgsGrid($fixedWidths, $breakpointName);
                @include wgsGridGutter($breakpointGutter, $fixedWidths);
                @include wgsGridGutter($breakpointGutter, $fixedWidths, $breakpointName);
                @include wgsRatioWidths($breakpointName);
                @include wgsHidden($breakpointName);

                @if $fixedWidths {
                    @each $width in $fixedWidths {
                        @include wgsFixedWidth($width, $breakpointGutter, $breakpointName);
                    }
                }
            }

            @include mqUntil($breakpointName){
                @include wgsVisible($breakpointName);
            }

            // Pour chaque breakpoint, à cause des tailles fixes,
            // on regarde les breakpoints supérieurs et on applique des valeurs
            // spécifiques au breakpoint courant, valables pour les breakpoints
            // supérieurs.
            // 
            // Ex : .300px@big-tablet
            // avec un gutter de 18px en big-tablet, qui doit être de 24px en
            // desktop, doit s'appliquer, même s'il n'y a pas la classe
            // .300px@desk
            @if $i + 1 <= length($breakpoints){
                @for $j from $i + 1 through length($breakpoints) {
                    $nextBreakpointData   : nth(map-values($breakpoints), $j);
                    $nextBreakpointName   : nth(map-keys($breakpoints), $j);
                    $nextBreakpointSize   : nth($nextBreakpointData,1);
                    $nextBreakpointGutter : nth($nextBreakpointData,2);

                    @include mq($nextBreakpointName) {
                        @include wgsGridGutter($nextBreakpointGutter, $fixedWidths, $breakpointName);
                    }

                    @if $fixedWidths {
                        @each $width in $fixedWidths {

                            @include mq($nextBreakpointName) {
                                @include wgsFixedWidth($width, $nextBreakpointGutter, $breakpointName);
                            }
                        }
                    }
                }
            }
        }
    }
}