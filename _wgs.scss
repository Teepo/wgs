/**
 * WGS (Webedia Grid System)
 *
 * README :
 *
 * https://github.com/webedia-udg/wgs
 *
 */

// Global variable use to store breakpoints names
$_wgsBreakpoints: ();
$_wgsMobileFirst: true;

/// min-width based media-query mixin
/// 
/// @access public
/// @param {string} $breakpoint - Breakpoint name. Must match one of wgsSetup() $breakpoints param
/// @example
///   .selector{
///       color: pink;
///       @include mq(tablet)  { color: blue; }
///       @include mq(desktop) { color: red;  }
///   }
@mixin mq($breakpointName) { 
    @if map-has-key($_wgsBreakpoints, $breakpointName) {
        $size: nth(map-get($_wgsBreakpoints, $breakpointName),1);
        @media screen and (min-width: $size) {
            @content;
        }
    }
}


/// max-width based media-query mixin
///
/// @access public
/// @param {string} $breakpoint - Breakpoint name. Must match one of wgsSetup() $breakpoints param
/// @example
///  @include mqUntil(desk){
///    color: red;
///  }
@mixin mqUntil($breakpointName) { 
    @if map-has-key($_wgsBreakpoints, $breakpointName) {
        $size: nth(map-get($_wgsBreakpoints, $breakpointName),1) - 1px;
        @media screen and (max-width: $size ) {
            @content;
        }
    }
}

/// Writes grid classes (.grid & its modifiers, .grid__item), eventually suffixed with breakpoint
/// Handles relations between .grid & .grid__item
/// 
/// @access private
/// @param {list} $gutters [()] - List of gutter sizes to handle
/// @param {list} $fixedWidths [()] - List of fixed sizes to handle
/// @param {string} $breakpointName [false] - Breakpoint name
/// @example
///   @include wgsGrid(
///     $gutters        : 12px 20px,
///     $fixedWidths    : 200px 300px,
///     $breakpointName : desktop
///   );
/// 
@mixin wgsGrid($gutters: (), $fixedWidths: (), $breakpointName:false) {
    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    // 1/ Box sizing for this breakpoint on grid
    [class~="grid#{$sufix}"],
    [class~="grid__item#{$sufix}"] {
        &,
        &:before,
        &:after{
            box-sizing: border-box !important;
        }
    }

    // 2/ Base style for this breakpoint's grid
    [class~="grid#{$sufix}"]{
        display: block;
        font-size: 0;
        & > .grid__item {
            display: inline-block;
            vertical-align: top;
            width: 100%;
            font-size: medium;

            // Pour remettre bien l'ordre au cas où la grille serait inversée
            direction: ltr;
            text-align:left;
        }
        & + .grid {
            margin-top: 0;  
        }
    }

    // 3/ Grid's modifiers :

    // a/ reversed order
    [class~="grid--rev#{$sufix}"] {
        direction: rtl;
    }

    // b/ centered grid
    [class~="grid--center#{$sufix}"] {
        text-align: center;
    }

    // c/ right aligned grid
    [class~="grid--right#{$sufix}"] {
        text-align: right;
    }

    // d/ fixed grid (no more box-sizing: border-box)
    .grid[class~="grid--fixed#{$sufix}"] {
        width: 100%;
        display: table;
        table-layout: fixed;
        margin-left: 0;


        > .grid__item {
            display: table-cell;
            vertical-align: top;
            box-sizing: content-box !important;
            &:first-child {
                padding-left: 0;
            }

        }
    }

    // e/ paddings (grid gutters)
    @each $gutter in $gutters {

        [class~="grid--#{$gutter}#{$sufix}"] {
            margin-left: -$gutter;
            margin-top: -$gutter;

            & > .grid__item {
                padding-left: $gutter;
                padding-top: $gutter;
            }

        }
    }

    @if length($gutters){
        [class~="grid--0#{$sufix}"] {
            margin-left: 0;
            margin-top: 0;

            & > .grid__item {
                padding-left: 0;
                padding-top: 0;
            }

        }
    }
}


/// Writes ratio classes (1/2, 1/3, etc), eventually suffixed with breakpoint name
/// 
/// @access private
/// @param {string} $breakpointName - Name of the breakpoint to handle
/// @example
///   @include wgsRatioWidths();
///   @include wgsRatioWidths(desktop);
@mixin wgsRatioWidths($breakpointName:false){

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="1/1#{$sufix}"]       { width: 100% !important; }
    
    // Demis
    [class~="1/2#{$sufix}"],
    [class~="2/4#{$sufix}"],
    [class~="3/6#{$sufix}"],
    [class~="4/8#{$sufix}"],
    [class~="5/10#{$sufix}"],
    [class~="6/12#{$sufix}"]      { width: 50% !important; }
    
    // Tiers
    [class~="1/3#{$sufix}"],
    [class~="2/6#{$sufix}"],
    [class~="3/9#{$sufix}"],
    [class~="4/12#{$sufix}"]      { width: 33.3333333% !important; }
    [class~="2/3#{$sufix}"],
    [class~="4/6#{$sufix}"],
    [class~="6/9#{$sufix}"],
    [class~="8/12#{$sufix}"]      { width: 66.6666666% !important; }
    
    // Quarts
    [class~="1/4#{$sufix}"],
    [class~="2/8#{$sufix}"],
    [class~="3/12#{$sufix}"]      { width: 25% !important; }
    [class~="3/4#{$sufix}"],
    [class~="6/8#{$sufix}"],
    [class~="9/12#{$sufix}"]      { width: 75% !important; }
    
    // Cinquièmes
    [class~="1/5#{$sufix}"],
    [class~="2/10#{$sufix}"]      { width: 20% !important; }
    [class~="2/5#{$sufix}"],
    [class~="4/10#{$sufix}"]      { width: 40% !important; }
    [class~="3/5#{$sufix}"],
    [class~="6/10#{$sufix}"]      { width: 60% !important; }
    [class~="4/5#{$sufix}"],
    [class~="8/10#{$sufix}"]      { width: 80% !important; }
    
    // Sixièmes
    [class~="1/6#{$sufix}"],
    [class~="2/12#{$sufix}"]      { width: 16.6666666% !important; }
    [class~="5/6#{$sufix}"],
    [class~="10/12#{$sufix}"]     { width: 83.3333333% !important; }

    // Huitièmes
    [class~="1/8#{$sufix}"]       { width: 12.5% !important; }
    [class~="3/8#{$sufix}"]       { width: 37.5% !important; }
    [class~="5/8#{$sufix}"]       { width: 62.5% !important; }
    [class~="7/8#{$sufix}"]       { width: 87.5% !important; }
    
    // Neuvièmes
    [class~="1/9#{$sufix}"]       { width: 11.1111111% !important; }
    [class~="2/9#{$sufix}"]       { width: 22.2222222% !important; }
    [class~="4/9#{$sufix}"]       { width: 44.4444444% !important; }
    [class~="5/9#{$sufix}"]       { width: 55.5555555% !important; }
    [class~="7/9#{$sufix}"]       { width: 77.7777777% !important; }
    [class~="8/9#{$sufix}"]       { width: 88.8888888% !important; }
    
    // Dixièmes
    [class~="1/10#{$sufix}"]      { width: 10% !important; }
    [class~="3/10#{$sufix}"]      { width: 30% !important; }
    [class~="7/10#{$sufix}"]      { width: 70% !important; }
    [class~="9/10#{$sufix}"]      { width: 90% !important; }
    
    // Douzièmes
    [class~="1/12#{$sufix}"]      { width:  8.3333333% !important; }
    [class~="5/12#{$sufix}"]      { width: 41.6666666% !important; }
    [class~="7/12#{$sufix}"]      { width: 58.3333333% !important; }
    [class~="11/12#{$sufix}"]     { width: 91.6666666% !important; }
}


/// Writes fixed widths
///
/// @access private
/// @param {string} $size - Size to handle
/// @param {string} $breakpointName [false] - Breakpoint name
/// @example
///   @include wgsFixedWidth(200px);
///   @include wgsFixedWidth(300px, desktop);
@mixin wgsFixedWidth($size, $breakpointName:false) {

    $gutter: 0;

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="#{$size}#{$sufix}"] {
        width: $size !important;
    }

    .grid__item + [class~="#{$size}#{$sufix}"] {
        width: $size + $gutter !important;
    }
}


/// Writes some visibility classes: .hidden@[breakpointName]
///
/// @access private
/// @param {string} $breakpointName [false] - breakpoint name
/// @example
///   @include wgsHidden();
///   @include wgsHidden(desktop);
@mixin wgsHidden($breakpointName: false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="hidden#{$sufix}"] {
        display: none !important;
    }    
}

/// Writes some visibility classes: .visible@[breakpointName]
///
/// @access private
/// @example
///   @include wgsVisible();
///   @include wgsVisible(desktop);
@mixin wgsVisible($breakpointName: false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    [class~="visible#{$sufix}"] {
        display: none !important;
    }    
}

/// writes OO spacing classes
///
/// @access private
/// @example
///   @include wgsSpacing(18px 22px);
///   @include wgsSpacing(18px 22px, desktop);
@mixin wgsSpacing($gutters: (), $breakpointName: false) {
    $sufix: "";
    @if $breakpointName{
        $sufix: "@#{$breakpointName}";
    }

    @each $gutter in $gutters {

        [class~="padding-top--#{$gutter}#{$sufix}"]{
            padding-top: $gutter;
        }
        [class~="padding-right--#{$gutter}#{$sufix}"]{
            padding-right: $gutter;
        }
        [class~="padding-bottom--#{$gutter}#{$sufix}"]{
            padding-bottom: $gutter;
        }
        [class~="padding-left--#{$gutter}#{$sufix}"]{
            padding-left: $gutter;
        }

        [class~="padding-hori--#{$gutter}#{$sufix}"]{
            @extend [class~="padding-right--#{$gutter}#{$sufix}"];
            @extend [class~="padding-left--#{$gutter}#{$sufix}"];
        }   

        [class~="padding-vert--#{$gutter}#{$sufix}"]{
            @extend [class~="padding-top--#{$gutter}#{$sufix}"];
            @extend [class~="padding-bottom--#{$gutter}#{$sufix}"];
        }

        [class~="padding--#{$gutter}#{$sufix}"]{
            @extend [class~="padding-hori--#{$gutter}#{$sufix}"];
            @extend [class~="padding-vert--#{$gutter}#{$sufix}"];
        }
    }
    @if length($gutters){
        [class~="padding-top--0#{$sufix}"]{
            padding-top: 0;
        }
        [class~="padding-right--0#{$sufix}"]{
            padding-right: 0;
        }
        [class~="padding-bottom--0#{$sufix}"]{
            padding-bottom: 0;
        }
        [class~="padding-left--0#{$sufix}"]{
            padding-left: 0;
        }
        [class~="padding-hori--0#{$sufix}"]{
            @extend [class~="padding-right--0#{$sufix}"];
            @extend [class~="padding-left--0#{$sufix}"];
        }
        [class~="padding-vert--0#{$sufix}"]{
            @extend [class~="padding-top--0#{$sufix}"];
            @extend [class~="padding-bottom--0#{$sufix}"];
        }

        [class~="padding--0#{$sufix}"]{
            @extend [class~="padding-top--0#{$sufix}"];
            @extend [class~="padding-right--0#{$sufix}"];
            @extend [class~="padding-bottom--0#{$sufix}"];
            @extend [class~="padding-left--0#{$sufix}"];
        }        
    }
}


/// Main function. has to be called with wanted fixed widths, breakpoints definition and gutter widths to handle
///
/// @access public
/// @param {list} $fixedWidths [()] - fixed sizes to handle
/// @param {map} $breakpoints [()] - breakpoints
/// @param {list} $gutters [()] - gutters to handle
/// @param {boolean} $mobileFirst [()] - mobile first ? (or desktop first)
/// @example
///   @include wgsSetup(
///       $fixedWidths : 200px 300px,
///       $breakpoints : (
///           tablet     : 480px,
///           big-tablet : 660px,
///           desk       : 990px
///       ),
///       $gutters : 12px 16px 18px 22px
///   );
@mixin wgsSetup(
    $fixedWidths  : (),
    $breakpoints  : (),
    $gutters      : (),
    $mobileFirst  : true
) {
    // Global namespaced variable holding breakpoint definitio, used by mq() and mqUntil()
    $_wgsBreakpoints : $breakpoints !global;

    // Global setting
    $_wgsMobileFirst : $mobileFirst !global;

    // 1/ Grid class & grid modifiers
    @include wgsGrid($gutters, $fixedWidths);

    // 2/ Ratio widths
    @include wgsRatioWidths;

    // 3/ Fixed widths
    @each $width in $fixedWidths {
        @include wgsFixedWidth($width);
    }

    @include wgsSpacing($gutters);

    // 4/ Same, but in a breakpoint
    @each $breakpointName, $breakpointSize in $breakpoints {

        // 
        @include mq($breakpointName) {
            @include wgsGrid($gutters, $fixedWidths, $breakpointName);
            @include wgsRatioWidths($breakpointName);
            @include wgsHidden($breakpointName);

            @each $width in $fixedWidths {
                @include wgsFixedWidth($width, $breakpointName);
            }

            @include wgsSpacing($gutters, $breakpointName);

        }

        @include mqUntil($breakpointName) {
            @include wgsVisible($breakpointName);
        }

        // Pour chaque breakpoint, à cause des tailles fixes,
        // on regarde les breakpoints supérieurs et on applique des valeurs
        // spécifiques au breakpoint courant, valables pour les breakpoints
        // supérieurs.
        // 
        // Ex : .300px@big-tablet
        // avec un gutter de 18px en big-tablet, qui doit être de 24px en
        // desktop, doit s'appliquer, même s'il n'y a pas la classe
        // .300px@desk
        // @if $i + 1 <= length($breakpoints){
        //     @for $j from $i + 1 through length($breakpoints) {
        //         $nextBreakpointData   : nth(map-values($breakpoints), $j);
        //         $nextBreakpointName   : nth(map-keys($breakpoints), $j);
        //         $nextBreakpointSize   : nth($nextBreakpointData,1);
        //         $nextBreakpointGutter : nth($nextBreakpointData,2);

        //         @include mq($nextBreakpointName) {
        //             //@include wgsGridGutter($nextBreakpointGutter, $fixedWidths, $breakpointName);
        //         }

        //         @if $fixedWidths {
        //             @each $width in $fixedWidths {

        //                 @include mq($nextBreakpointName) {
        //                     @include wgsFixedWidth($width, $nextBreakpointGutter, $breakpointName);
        //                 }
        //             }
        //         }
        //     }
        // }
    }


}