/**
 * WGS (Webedia Grid System)
 *
 * 1) Introduction
 *
 * Ce fichier SASS à inclure dans votre projet génère des noms de classes et des
 * propriétés utilisée dans le cadre du grid system webedia.
 *
 * Ces classes définissent des ratios ou des tailles fixes, préfixées ou pas 
 * par des noms définissant les breakpoints à partir desquelles elles agissent.
 *
 * Inclure ce fichier génère des règles du type [class~="1/2"], [class~="1/2"],
 * [class~="5/6"], etc...
 *
 * Le [class...] est utilisé pour pouvoir utiliser des "/" (slash) dans le nom
 * des classes car par exemple .1/2 ou .5/6 ne marcherait pas.
 *
 * Ce fichier founi aussi un mixin @mq (media-query) et des classes de 
 * visibilité (desk-hidden, tablet-visible...)
 *
 * Ce fichier définit deux options, à false par défaut :
 *
 *  - $fixedWidths (false)  => défini les tailles fixes.
 *  - $breakpoints (false)  => les breakpoints utilisables avec un nom "humain".
 *  - $gutter (24px)        => espace entre les cases
 *  - $useFixedGrid (false) => les grids fixes sont-elles utilisées
 *  - $usePush (false)      => Utilisation des classes de push ?
 *  - $usePull (false)      => Utilisation des classes de pull ?
 *
 * 2) Exemple d'utilisation :
 *
 *    $fixedWidths: 600px 660px 900px;
 *    $breakpoints: (
 *        tablet     : 480px,
 *        big-tablet : 660px,
 *        desk       : 990px
 *    );
 *    @import "wgs";
 */


$fixedWidths  : false !default;
$breakpoints  : false !default;
$gutter       : 24px !default;
$useFixedGrid : false !default;
$usePush      : false !default;
$usePull      : false !default;

/**
 * Mixin de media-query
 *
 * @param string $breakpoint : nom du breakpoint. Doit correspondre à l'un des
 *                             éléments de $breakpoints
 * Ex : @include mq(desk){...}
 */
@mixin mq($breakpoint) { 
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }
}

@mixin mqUntil($breakpoint, $size) { 
  @if map-has-key($breakpoints, $breakpoint) {
    $size: $size - 1px;
    @media screen and (max-width: $size ) {
      @content;
    }
  }
}



/**
 * Ajoute les classes de grilles (.grid, .grid--fixed, .grid__item),
 * éventuellement préfixées. Gère les relations entre les .grid & .grid__item
 *
 * @param string $breakpoint (false) => Le préfixe.
 */
@mixin grid($breakpoint:false) {
    $sufix: "";
    @if $breakpoint{
        $sufix: "@#{$breakpoint}";
    }

    [class~="grid#{$sufix}"] {
        display: block;
        margin-left: -$gutter;
        margin-top: -$gutter;



        & + [class~="grid#{$sufix}"] {
            margin-top: 0;
        }

        & > .grid__item {
            display: inline-block;
            vertical-align: top;
            padding-left: $gutter;
            padding-top: $gutter;
            width: 100%;

            // Pour remettre bien l'ordre au cas où la grille serait inversée
            direction:ltr;
            text-align:left;
        }
    }


    [class~="grid--rev#{$sufix}"] {
        direction:rtl;
        text-align:left;
    }

    [class~="grid--center#{$sufix}"] {
        text-align: center;
        & > .grid__item {
            text-align: left;
        }
    }

    [class~="grid--right#{$sufix}"] {
        text-align: right;
        & > .grid__item {
            text-align: left;
        }
    }

    @if $useFixedGrid {

        .grid[class~="grid--fixed#{$sufix}"] {
            width: 100%;
            display: table;
            table-layout: fixed;
            margin-left: 0;

            margin-top: $gutter;
            .grid & {
                margin-top: 0;
            }
            
            
            > .grid__item {
                display: table-cell;
                vertical-align: top;
                padding-left: 0;
                padding-top: 0;

                & + .grid__item {
                    padding-left: $gutter;
                }
            }
        }
    }
}


/**
 * Ecrit des classes de largeur ratio.
 * 
 * @param String $breakpoint : le nom du breakpoint à prendre en compte
 */
@mixin ratioWidths($breakpoint:false){

    $sufix: "";
    @if $breakpoint{
        $sufix: "@#{$breakpoint}";
    }

    [class~="1/1#{$sufix}"]       { width: 100% !important; }
    
    // Demis
    [class~="1/2#{$sufix}"],
    [class~="2/4#{$sufix}"],
    [class~="3/6#{$sufix}"],
    [class~="4/8#{$sufix}"],
    [class~="5/10#{$sufix}"],
    [class~="6/12#{$sufix}"]      { width: 50% !important; }
    
    // Tiers
    [class~="1/3#{$sufix}"],
    [class~="2/6#{$sufix}"],
    [class~="3/9#{$sufix}"],
    [class~="4/12#{$sufix}"]      { width: 33.3333333% !important; }
    [class~="2/3#{$sufix}"],
    [class~="4/6#{$sufix}"],
    [class~="6/9#{$sufix}"],
    [class~="8/12#{$sufix}"]      { width: 66.6666666% !important; }
    
    // Quarts
    [class~="1/4#{$sufix}"],
    [class~="2/8#{$sufix}"],
    [class~="3/12#{$sufix}"]      { width: 25% !important; }
    [class~="3/4#{$sufix}"],
    [class~="6/8#{$sufix}"],
    [class~="9/12#{$sufix}"]      { width: 75% !important; }
    
    // Cinquièmes
    [class~="1/5#{$sufix}"],
    [class~="2/10#{$sufix}"]      { width: 20% !important; }
    [class~="2/5#{$sufix}"],
    [class~="4/10#{$sufix}"]      { width: 40% !important; }
    [class~="3/5#{$sufix}"],
    [class~="6/10#{$sufix}"]      { width: 60% !important; }
    [class~="4/5#{$sufix}"],
    [class~="8/10#{$sufix}"]      { width: 80% !important; }
    
    // Sixièmes
    [class~="1/6#{$sufix}"],
    [class~="2/12#{$sufix}"]      { width: 16.6666666% !important; }
    [class~="5/6#{$sufix}"],
    [class~="10/12#{$sufix}"]     { width: 83.3333333% !important; }

    // Huitièmes
    [class~="1/8#{$sufix}"]       { width: 12.5% !important; }
    [class~="3/8#{$sufix}"]       { width: 37.5% !important; }
    [class~="5/8#{$sufix}"]       { width: 62.5% !important; }
    [class~="7/8#{$sufix}"]       { width: 87.5% !important; }
    
    // Neuvièmes
    [class~="1/9#{$sufix}"]       { width: 11.1111111% !important; }
    [class~="2/9#{$sufix}"]       { width: 22.2222222% !important; }
    [class~="4/9#{$sufix}"]       { width: 44.4444444% !important; }
    [class~="5/9#{$sufix}"]       { width: 55.5555555% !important; }
    [class~="7/9#{$sufix}"]       { width: 77.7777777% !important; }
    [class~="8/9#{$sufix}"]       { width: 88.8888888% !important; }
    
    // Dixièmes
    [class~="1/10#{$sufix}"]      { width: 10% !important; }
    [class~="3/10#{$sufix}"]      { width: 30% !important; }
    [class~="7/10#{$sufix}"]      { width: 70% !important; }
    [class~="9/10#{$sufix}"]      { width: 90% !important; }
    
    // Douzièmes
    [class~="1/12#{$sufix}"]      { width:  8.3333333% !important; }
    [class~="5/12#{$sufix}"]      { width: 41.6666666% !important; }
    [class~="7/12#{$sufix}"]      { width: 58.3333333% !important; }
    [class~="11/12#{$sufix}"]     { width: 91.6666666% !important; }
}

/**
 * Ecrit des classes de largeur fixe.
 * @param String $prefix : le préfixe à ajouter devant chaque classe
 */
@mixin fixedWidth($size, $breakpoint:false) {

    $sufix: "";
    @if $breakpoint{
        $sufix: "@#{$breakpoint}";
    }

    [class~="#{$size}#{$sufix}"] {
        width: $size !important;
    }

    .grid__item + [class~="#{$size}#{$sufix}"] {
        width: $size + $gutter !important;
    }
}


/**
 * Quelques classes de visibilité
 */
@mixin hidden($breakpoint: false) {

    $sufix: "";
    @if $breakpoint{
        $sufix: "@#{$breakpoint}";
    }

    [class~="hidden#{$sufix}"] {
        display: none !important;
    }    
}

@mixin visible($breakpoint: false) {

    $sufix: "";
    @if $breakpoint{
        $sufix: "@#{$breakpoint}";
    }

    [class~="visible#{$sufix}"] {
        display: none !important;
    }    
}

/**
 * Ecriture des règles 
 */


// 1/ Borderbox pour tout le monde !
// css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
// paulirish.com/2012/box-sizing-border-box-ftw
html {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}
*{
    &,
    &:before,
    &:after{
        -webkit-box-sizing: border-box;
           -moz-box-sizing: border-box;
            -ms-box-sizing: border-box;
             -o-box-sizing: border-box;
                box-sizing: border-box;
    }
}


// 2/ Ratios sans responsive
@include grid;
@include ratioWidths;


// 3/ Tailles fixes sans responsive
@if $fixedWidths {
    @each $width in $fixedWidths {
        @include fixedWidth($width);
    }
}


// 4/ Gestion des ratios et tailles fixes en responsive
@if $breakpoints {
    
    @each $name, $size in $breakpoints {
        @include mq($name) {
            @include grid($name);
            @include ratioWidths($name);
            @include hidden($name);


            @if $fixedWidths {
                @each $width in $fixedWidths {
                    @include fixedWidth($width, $name);
                }
            }
        }

        @include mqUntil($name, $size){
            @include visible($name);
        }
    }
}
