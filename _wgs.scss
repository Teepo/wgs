/**
 * Whatever Grid System (WGS) v0.7.5
 *
 * README :
 *
 * https://github.com/webedia-udg/wgs
 *
 * Warning, this file wont compile with libsass, because of backshash escaping
 * if you want to make it work with libsass, use a simple escape instead of double.
 */

// Global variable use to store breakpoints names
$_wgsBreakpoints: ();
$_wgsNamespace: false;


@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

// Preprend BackSlash to a string
@function prependBackSlash($str) {
    // Hack : RubySass needs a second backslash.
    // RubySass 
    @if "\$" == "$" {
        @return "\\#{$str}";
    }
    // LibSass
    @else {
        @return "\#{$str}";
    }
}

/// Escapes the first digit of a number
/// @param {string|integer} $number - the number to escape
/// @example
///     escapeFirstDigit(1)
///     // => '\31 '
///     escapeFirstDigit(123)
///     // => '\31 23'
///     escapeFirstDigit("99999999")
///     // => '\39 9999999'
@function escapeFirstDigit($number) {
    $string: #{$number}; // = toString()

    $firstDigit: str-slice($string, 1, 1);

    $remainingDigits: str-slice($string, 2, 99); // 99 is useless but without the third parameter, 
                                                 // str-slice by libSass doesn't work properly 
    $return: #{prependBackSlash("3") + $firstDigit + " " + $remainingDigits};

    @return $return;
}
/// Escapes a ratio with a sufix
/// @example
///   #{wgsRatio(1 , 2, "tablet")}
///   // => [class~="1/2@tablet"]
@function wgsRatio($a, $b, $breakpointName: false){

    $sufix: "";
    @if $breakpointName{
        $sufix: prependBackSlash("@#{$breakpointName}");
    }

    @if $_wgsNamespace{
        @return "."  + $_wgsNamespace + $a + prependBackSlash("/") + $b + $sufix;
    }
    @else{
        @return "." + escapeFirstDigit($a) + prependBackSlash("/") + $b + $sufix;
    }

}

/// Media Query mixin
/// 
/// @access public
/// @param {string} $from [false] - Apply rules from this breakpoint name
/// @param {string} $until [false] - Apply rules until this breakpoint name
/// @param {string} $and [false] - Additional media query parameters
/// @example
///   @include mq(tablet){ color: red }; // Results depends of the mobile first approach
///   @include mq($from: tablet){ color: red };
///   @include mq($until: desktop){ color: red };
/// 
@mixin mq(
    $from: false,
    $until: false,
    $and: false
) {
    $min-width: 0;
    $max-width: 0;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {
        $min-width: nth(map-get($_wgsBreakpoints, $from),1)
    }

    // Until: that breakpoint (exclusive)
    @if $until {
        $max-width: nth(map-get($_wgsBreakpoints, $until),1) - 1px;
    }

    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
    @if $and            { $media-query: '#{$media-query} and #{$and}'; }

    @media #{"screen" + $media-query} {
        @content;
    }
}

/// Writes grid classes (.grid & its modifiers), eventually suffixed with breakpoint
/// Handles relations between .grid and its cells
/// 
/// @access private
/// @param {list} $gutters [()] - List of gutter sizes to handle
/// @param {list} $fixedWidths [()] - List of fixed sizes to handle
/// @param {string} $breakpointName [false] - Breakpoint name
/// @example
///   @include wgsGrid(
///     $gutters        : 12px 20px,
///     $fixedWidths    : 200px 300px,
///     $breakpointName : desktop
///   );
/// 
@mixin wgsGrid(
    $gutters: (),
    $fixedWidths: (),
    $breakpointName:false,
    $defaultDirection : ltr,
    $ltrParentClass : false,
    $rtlParentClass : false
) {
    $sufix: "";
    @if $breakpointName{
        $sufix: prependBackSlash("@#{$breakpointName}");
    }


    $prefix: "";
    @if $_wgsNamespace{
        $prefix: $_wgsNamespace;
    }

    // 1/ Box sizing for this breakpoint on grid
    .#{$prefix}grid#{$sufix},
    .#{$prefix}grid#{$sufix} > * {
        &,
        &:before,
        &:after{
            box-sizing: border-box !important;
        }
    }

    // 2/ Base style for this breakpoint's grid
    .#{$prefix}grid#{$sufix} {
        display: block;
        font-size: 0;

        @if $defaultDirection == ltr{
            direction: ltr;
        }
        @elseif $defaultDirection == rtl{
            direction: rtl;
        }
        @if $ltrParentClass {
            .#{$ltrParentClass} & {
                direction: ltr;
            }
        }
        @if $rtlParentClass {
            .#{$rtlParentClass} & {
                direction: rtl;
            }
        }

        & > * {
            display: inline-block;
            vertical-align: top;
            width: 100%;
            font-size: medium;

            // Pour remettre bien l'ordre au cas où la grille serait inversée
            @if $defaultDirection == ltr{
                direction: ltr;
                text-align:left;
            }
            @elseif $defaultDirection == rtl{
                direction: rtl;
                text-align: right;
            }
            @if $ltrParentClass {
                .#{$ltrParentClass} & {
                    direction: ltr;
                    text-align:left;
                }
            }
            @if $rtlParentClass {
                .#{$rtlParentClass} & {
                    direction: rtl;
                    text-align: right;
                }
            }
        }
    }

    // 3/ Grid's modifiers :

    // a/ reversed order
    .#{$prefix}grid--rev#{$sufix} {
        @if $defaultDirection == ltr{
            direction: rtl;
        }
        @elseif $defaultDirection == rtl{
            direction: ltr;
        }
        @if $ltrParentClass {
            .#{$ltrParentClass} & {
                direction: rtl;
            }
        }
        @if $rtlParentClass {
            .#{$rtlParentClass} & {
                direction: ltr;
            }
        }
    }

    // b/ centered grid
    .#{$prefix}grid--center#{$sufix} {
        text-align: center;
    }

    // c/ left aligned grid
    .#{$prefix}grid--left#{$sufix} {
        @if $defaultDirection {
            text-align: left;
        }
        @if $ltrParentClass {
            .#{$ltrParentClass} & {
                text-align: left;
            }
        }
        @if $rtlParentClass {
            .#{$rtlParentClass} & {
                text-align: right;
            }
        }
    }

    // d/ right aligned grid
    .#{$prefix}grid--right#{$sufix} {

        @if $defaultDirection {
            text-align: right;
        }
        @if $ltrParentClass {
            .#{$ltrParentClass} & {
                text-align: right;
            }
        }
        @if $rtlParentClass {
            .#{$rtlParentClass} & {
                text-align: left;
            }
        }

    }

    // e/ fixed grid (no more box-sizing: border-box)
    // overload of main grid properties
    .#{$prefix}grid.#{$prefix}grid--fixed#{$sufix} {
        width: 100%;
        display: table;
        table-layout: fixed;

        @if $defaultDirection == ltr{
            margin-left: 0;
        }
        @elseif $defaultDirection == rtl{
            margin-right: 0;
        }
        @if $ltrParentClass {
            .#{$ltrParentClass} & {
                margin-left: 0;
            }
        }
        @if $rtlParentClass {
            .#{$rtlParentClass} & {
                margin-right: 0;
            }
        }



        > * {
            display: table-cell;
            vertical-align: top;
            box-sizing: content-box !important;
            &:first-child {
                @if $defaultDirection == ltr{
                    padding-left: 0;
                }
                @elseif $defaultDirection == rtl{
                    padding-right: 0;
                }
                @if $ltrParentClass {
                    .#{$ltrParentClass} & {
                        padding-left: 0;
                    }
                }
                @if $rtlParentClass {
                    .#{$rtlParentClass} & {
                        padding-right: 0;
                    }
                }
            }
        }
    }

    // f/ paddings (grid gutters)
    @each $gutter in $gutters {

        .#{$prefix}grid--#{$gutter}-vert#{$sufix}{
            margin-top: -$gutter;
            & > * {
                padding-top: $gutter;
            }
        }
        .#{$prefix}grid--#{$gutter}-hori#{$sufix}{
            @if $defaultDirection == ltr{
                margin-left: -$gutter;
            }
            @elseif $defaultDirection == rtl{
                margin-right: -$gutter;
            }
            @if $ltrParentClass {
                .#{$ltrParentClass} & {
                    margin-left: -$gutter;
                }
            }
            @if $rtlParentClass {
                .#{$rtlParentClass} & {
                    margin-right: -$gutter;
                }
            }

            & > * {
                @if $defaultDirection == ltr{
                    padding-left: $gutter;
                }
                @elseif $defaultDirection == rtl{
                    padding-right: $gutter;
                }
                @if $ltrParentClass {
                    .#{$ltrParentClass} & {
                        padding-left: $gutter;
                    }
                }
                @if $rtlParentClass {
                    .#{$rtlParentClass} & {
                        padding-right: $gutter;
                    }
                }
            }
        }


        .#{$prefix}grid--#{$gutter}#{$sufix} {
            @extend .#{$prefix}grid--#{$gutter}-vert#{$sufix};
            @extend .#{$prefix}grid--#{$gutter}-hori#{$sufix};
        }

    }

    @if length($gutters){
        .#{$prefix}grid--0#{$sufix} {
            margin-top: 0;
            @if $defaultDirection == ltr{
                margin-left: 0;
            }
            @elseif $defaultDirection == rtl{
                margin-right: 0;
            }
            @if $ltrParentClass {
                .#{$ltrParentClass} & {
                    margin-left: 0;
                }
            }
            @if $rtlParentClass {
                .#{$rtlParentClass} & {
                    margin-right: 0;
                }
            }

            & > * {
                padding-top: 0;

                @if $defaultDirection == ltr{
                    padding-left: 0;
                }
                @elseif $defaultDirection == rtl{
                    padding-right: 0;
                }
                @if $ltrParentClass {
                    .#{$ltrParentClass} & {
                        padding-left: 0;
                    }
                }
                @if $rtlParentClass {
                    .#{$rtlParentClass} & {
                        padding-right: 0;
                    }
                }
            }
        }
    }
}

/// Writes ratio classes (1/2, 1/3, etc), eventually suffixed with breakpoint name
/// 
/// @access private
/// @param {string} $breakpointName - Name of the breakpoint to handle
/// @example
///   @include wgsRatioWidths();
///   @include wgsRatioWidths(desktop);
@mixin wgsRatioWidths($breakpointName:false){

    // Whole
    #{wgsRatio(1 , 1, $breakpointName)}       { width: 100% !important; }

    
    // Halves
    #{wgsRatio(1 , 2, $breakpointName)},
    #{wgsRatio(2 , 4, $breakpointName)},
    #{wgsRatio(3 , 6, $breakpointName)},
    #{wgsRatio(4 , 8, $breakpointName)},
    #{wgsRatio(5 ,10, $breakpointName)},
    #{wgsRatio(6 ,12, $breakpointName)}      { width: 50% !important; }
    
    // Thirds
    #{wgsRatio(1 , 3, $breakpointName)},
    #{wgsRatio(2 , 6, $breakpointName)},
    #{wgsRatio(3 , 9, $breakpointName)},
    #{wgsRatio(4 ,12, $breakpointName)}      { width: 33.3333333% !important; }
    #{wgsRatio(2 , 3, $breakpointName)},
    #{wgsRatio(4 , 6, $breakpointName)},
    #{wgsRatio(6 , 9, $breakpointName)},
    #{wgsRatio(8 ,12, $breakpointName)}      { width: 66.6666666% !important; }

    // Quarters
    #{wgsRatio(1 , 4, $breakpointName)},
    #{wgsRatio(2 , 8, $breakpointName)},
    #{wgsRatio(3 ,12, $breakpointName)}      { width: 25% !important; }
    #{wgsRatio(3 , 4, $breakpointName)},
    #{wgsRatio(6 , 8, $breakpointName)},
    #{wgsRatio(9 ,12, $breakpointName)}      { width: 75% !important; }

    // Fifths
    #{wgsRatio(1 , 5, $breakpointName)},
    #{wgsRatio(2 ,10, $breakpointName)}      { width: 20% !important; }
    #{wgsRatio(2 , 5, $breakpointName)},
    #{wgsRatio(4 ,10, $breakpointName)}      { width: 40% !important; }
    #{wgsRatio(3 , 5, $breakpointName)},
    #{wgsRatio(6 ,10, $breakpointName)}      { width: 60% !important; }
    #{wgsRatio(4 , 5, $breakpointName)},
    #{wgsRatio(8 ,10, $breakpointName)}      { width: 80% !important; }

    // Sixths
    #{wgsRatio(1 , 6, $breakpointName)},
    #{wgsRatio(2 ,12, $breakpointName)}      { width: 16.6666666% !important; }
    #{wgsRatio(5 , 6, $breakpointName)},
    #{wgsRatio(10,12, $breakpointName)}      { width: 83.3333333% !important; }

    // Eighths
    #{wgsRatio(1 , 8, $breakpointName)}      { width: 12.5% !important; }
    #{wgsRatio(3 , 8, $breakpointName)}      { width: 37.5% !important; }
    #{wgsRatio(5 , 8, $breakpointName)}      { width: 62.5% !important; }
    #{wgsRatio(7 , 8, $breakpointName)}      { width: 87.5% !important; }

    // Ninths
    #{wgsRatio(1 , 9, $breakpointName)}      { width: 11.1111111% !important; }
    #{wgsRatio(2 , 9, $breakpointName)}      { width: 11.1111111% !important; }
    #{wgsRatio(4 , 9, $breakpointName)}      { width: 44.4444444% !important; }
    #{wgsRatio(5 , 9, $breakpointName)}      { width: 55.5555555% !important; }
    #{wgsRatio(7 , 9, $breakpointName)}      { width: 77.7777777% !important; }
    #{wgsRatio(8 , 9, $breakpointName)}      { width: 88.8888888% !important; }

    // Tenths
    #{wgsRatio(1 ,10, $breakpointName)}      { width: 10% !important; }
    #{wgsRatio(3 ,10, $breakpointName)}      { width: 30% !important; }
    #{wgsRatio(7 ,10, $breakpointName)}      { width: 70% !important; }
    #{wgsRatio(9 ,10, $breakpointName)}      { width: 90% !important; }

    // Twelves
    #{wgsRatio(1 ,12, $breakpointName)}      { width:  8.3333333% !important; }
    #{wgsRatio(5 ,12, $breakpointName)}      { width: 41.6666666% !important; }
    #{wgsRatio(7 ,12, $breakpointName)}      { width: 58.3333333% !important; }
    #{wgsRatio(11,12, $breakpointName)}      { width: 91.6666666% !important; }
    
}



/// Writes fixed widths
///
/// @access private
/// @param {string} $size - Size to handle
/// @param {string} $breakpointName [false] - Breakpoint name
/// @example
///   @include wgsFixedWidth(200px);
///   @include wgsFixedWidth(300px, desktop);
@mixin wgsFixedWidth($size, $breakpointName:false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: prependBackSlash("@#{$breakpointName}");
    }

    // No need to escape if namespace provided
    @if $_wgsNamespace{
        .#{$_wgsNamespace}#{$size}#{$sufix}{
             width: $size !important;        
         }
    }
    @else{
        $sizeValue: strip-units($size);
        $sizeUnit: unit($size);
        $hop: #{"." + escapeFirstDigit($sizeValue) + $sizeUnit + $sufix};
        //@debug $hop;
        // Fixme : pure escaping wont work
        #{$hop}{
             width: $size !important;        
        }
        // [class~="#{$size}#{$sufix}"] {
        //     width: $size !important;
    }

}


/// Writes some visibility classes: .hidden@[breakpointName]
///
/// @access private
/// @param {string} $breakpointName [false] - breakpoint name
/// @example
///   @include wgsHidden();
///   @include wgsHidden(desktop);
@mixin wgsHidden($breakpointName: false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: prependBackSlash("@#{$breakpointName}");
    }
    $prefix: "";
    @if $_wgsNamespace{
        $prefix: $_wgsNamespace;
    }

    .#{$prefix}hidden#{$sufix} {
        display: none !important;
    }    
}

/// Writes some visibility classes: .visible@[breakpointName]
///
/// @access private
/// @example
///   @include wgsVisible();
///   @include wgsVisible(desktop);
@mixin wgsVisible($breakpointName: false) {

    $sufix: "";
    @if $breakpointName{
        $sufix: prependBackSlash("@#{$breakpointName}");
    }
    $prefix: "";
    @if $_wgsNamespace{
        $prefix: $_wgsNamespace;
    }

    .#{$prefix}visible#{$sufix} {
        display: none !important;
    }    
}

/// writes OO spacing classes
///
/// @access private
/// @example
///   @include wgsSpacing(18px 22px);
///   @include wgsSpacing(18px 22px, desktop);
@mixin wgsSpacing(
    $gutters: (),
    $breakpointName: false,
    $defaultDirection : ltr,
    $ltrParentClass : false,
    $rtlParentClass : false
) {
    $sufix: "";
    @if $breakpointName{
        $sufix: prependBackSlash("@#{$breakpointName}");
    }

    $prefix: "";
    @if $_wgsNamespace{
        $prefix: $_wgsNamespace;
    }


    @each $gutter in $gutters {

        .#{$prefix}padding-top--#{$gutter}#{$sufix} {
            padding-top: $gutter;
        }
        .#{$prefix}padding-right--#{$gutter}#{$sufix} {
            @if $defaultDirection {
                padding-right: $gutter;
            }
            @if $ltrParentClass {
                .#{$ltrParentClass} & {
                    padding-right: $gutter;
                }
            }
            @if $rtlParentClass {
                .#{$rtlParentClass} & {
                    padding-left: $gutter;
                }
            }

        }
        .#{$prefix}padding-bottom--#{$gutter}#{$sufix} {
            padding-bottom: $gutter;
        }
        .#{$prefix}padding-left--#{$gutter}#{$sufix} {
            @if $defaultDirection {
                padding-left: $gutter;
            }
            @if $ltrParentClass {
                .#{$ltrParentClass} & {
                    padding-left: $gutter;
                }
            }
            @if $rtlParentClass {
                .#{$rtlParentClass} & {
                    padding-right: $gutter;
                }
            }
        }

        .#{$prefix}padding-hori--#{$gutter}#{$sufix} {
            @extend .#{$prefix}padding-right--#{$gutter}#{$sufix};
            @extend .#{$prefix}padding-left--#{$gutter}#{$sufix};
        }   

        .#{$prefix}padding-vert--#{$gutter}#{$sufix} {
            @extend .#{$prefix}padding-top--#{$gutter}#{$sufix};
            @extend .#{$prefix}padding-bottom--#{$gutter}#{$sufix};
        }

        .#{$prefix}padding--#{$gutter}#{$sufix} {
            @extend .#{$prefix}padding-hori--#{$gutter}#{$sufix};
            @extend .#{$prefix}padding-vert--#{$gutter}#{$sufix};
        }
    }
    @if length($gutters){
        .#{$prefix}padding-top--0#{$sufix} {
            padding-top: 0;
        }
        .#{$prefix}padding-right--0#{$sufix} {
            @if $defaultDirection {
                padding-right: 0;
            }
            @if $ltrParentClass {
                .#{$ltrParentClass} & {
                    padding-right: 0;
                }
            }
            @if $rtlParentClass {
                .#{$rtlParentClass} & {
                    padding-left: 0;
                }
            }

        }
        .#{$prefix}padding-bottom--0#{$sufix} {
            padding-bottom: 0;
        }
        .#{$prefix}padding-left--0#{$sufix} {
            @if $defaultDirection {
                padding-left: 0;
            }
            @if $ltrParentClass {
                .#{$ltrParentClass} & {
                    padding-left: 0;
                }
            }
            @if $rtlParentClass {
                .#{$rtlParentClass} & {
                    padding-right: 0;
                }
            }
        }
        .#{$prefix}padding-hori--0#{$sufix} {
            @extend .#{$prefix}padding-right--0#{$sufix};
            @extend .#{$prefix}padding-left--0#{$sufix};
        }
        .#{$prefix}padding-vert--0#{$sufix} {
            @extend .#{$prefix}padding-top--0#{$sufix};
            @extend .#{$prefix}padding-bottom--0#{$sufix};
        }

        .#{$prefix}padding--0#{$sufix} {
            @extend .#{$prefix}padding-top--0#{$sufix};
            @extend .#{$prefix}padding-right--0#{$sufix};
            @extend .#{$prefix}padding-bottom--0#{$sufix};
            @extend .#{$prefix}padding-left--0#{$sufix};
        }        
    }
}


/// Main function. has to be called with wanted fixed widths, breakpoints definition and gutter widths to handle
///
/// @access public
/// @param {map} $breakpoints [()] - breakpoints
/// @param {list} $gutters [()] - gutters to handle
/// @param {list} $fixedWidths [()] - fixed sizes to handle
/// @param {boolean} $mobileFirst [()] - mobile first ? (or desktop first)
/// @param {string} $namespace [false] - namespace used by wgs
/// @param {string} $defaultDirection [ltr] - default text direction
/// @param {string} $ltrParentClass [false] - parent Class Toggleling RTL direction
/// @param {string} $rtlParentClass [false] - parent Class Toggleling LTR direction
/// @example
///   @include wgsSetup(
///       $breakpoints : (
///           tablet     : 480px,
///           big-tablet : 660px,
///           desk       : 990px
///       ),
///       $gutters : 12px 16px 18px 22px,
///       $fixedWidths : 200px 300px
///   );
@mixin wgsSetup(
    $breakpoints  : (),
    $gutters      : (),
    $fixedWidths  : (),
    $mobileFirst  : true,
    $namespace    : false,
    $defaultDirection : ltr,
    $ltrParentClass : false,
    $rtlParentClass : false
) {
    // Global namespaced variable holding breakpoint definition used by mq()
    $_wgsBreakpoints : $breakpoints !global;

    // Global namespace
    $_wgsNamespace : $namespace !global;


    // 1/ Grid class & grid modifiers
    @include wgsGrid($gutters, $fixedWidths, false, $defaultDirection, $ltrParentClass, $rtlParentClass);

    // 2/ Ratio widths
    @include wgsRatioWidths;

    // 3/ Fixed widths
    @each $width in $fixedWidths {
        @include wgsFixedWidth($width);
    }

    // 4/ Spacings
    @include wgsSpacing($gutters, false, $defaultDirection, $ltrParentClass, $rtlParentClass);

    // 5/ 1, 2, 3 & 4, but in a breakpoint
    @each $breakpointName, $breakpointSize in $breakpoints {

        // 
        $from  : false;
        $until : $breakpointName;

        @if $mobileFirst {
            $from  : $breakpointName;
            $until : false;
        }

        @include mq($from: $from, $until: $until) {

            @include wgsGrid($gutters, $fixedWidths, $breakpointName, $defaultDirection, $ltrParentClass, $rtlParentClass);
            @include wgsRatioWidths($breakpointName);
            @include wgsHidden($breakpointName);

            @each $width in $fixedWidths {
                @include wgsFixedWidth($width, $breakpointName);
            }

            @include wgsSpacing($gutters, $breakpointName, $defaultDirection, $ltrParentClass, $rtlParentClass);

        }

        @include mq($until: $breakpointName) {
            @include wgsVisible($breakpointName);
        }
    }
}



